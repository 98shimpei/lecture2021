;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 4.1.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(setq webotslib (load-foreign (format nil "~A/lib/controller/libController.so" (unix:getenv "WEBOTS_HOME"))))

(defmacro defcenum (type &rest args)
   `(defcstruct ,type (x :integer))
   )



;;;SWIG wrapper code starts here

(defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
   `(progn ,@(loop for value in enums
                        for index = 0 then (1+ index)
                        when (listp value) do (setf index (second value)
                                                          value (first value))
                        collect `(defconstant ,value ,index))))
#|
(eval-when (:compile-toplevel :load-toplevel)
  (unless (fboundp 'swig-lispify)
    (defun swig-lispify (name flag &optional (package *package*))
      (labels ((helper (lst last rest &aux (c (car lst)))
                    (cond
                      ((null lst)
                       rest)
                      ((upper-case-p c)
                       (helper (cdr lst) 'upper
                               (case last
                                 ((lower digit) (list* c #\- rest))
                                 (t (cons c rest)))))
                      ((lower-case-p c)
                       (helper (cdr lst) 'lower (cons (char-upcase c) rest)))
                      ((digit-char-p c)
                       (helper (cdr lst) 'digit 
                               (case last
                                 ((upper lower) (list* c #\- rest))
                                 (t (cons c rest)))))
                      ((char-equal c #\_)
                       (helper (cdr lst) '_ (cons #\- rest)))
                      (t
                       (error "Invalid character: ~A" c)))))
        (let ((fix (case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (t ""))))
          (intern
           (concatenate
            string
            fix
            (nreverse (helper (concatenate cons name) nil nil))
            fix)
           package))))))
|#
;;;SWIG wrapper code ends here


(defconstant INFINITY (/ 1.0d0 0.0d0))
(defconstant WB_ANGULAR 0)

(defcenum WbJointType
	(:WB_ROTATIONAL 0)
	:WB_LINEAR)

(defcenum WbRobotMode
	(:WB_MODE_SIMULATION 0)
	:WB_MODE_CROSS_COMPILATION
	:WB_MODE_REMOTE_CONTROL)

(defcenum WbUserInputEvent
	(:WB_EVENT_QUIT -1)
	(:WB_EVENT_NO_EVENT 0)
	(:WB_EVENT_MOUSE_CLICK 1)
	(:WB_EVENT_MOUSE_MOVE 2)
	(:WB_EVENT_KEYBOARD 4)
	(:WB_EVENT_JOYSTICK_BUTTON 8)
	(:WB_EVENT_JOYSTICK_AXIS 16)
	(:WB_EVENT_JOYSTICK_POV 32))

(defforeign wb_robot_init webotslib
	"wb_robot_init" () :integer)
	;;  ()

(defforeign wb_robot_step webotslib
	"wb_robot_step" () :integer)
	;;  ( :integer)

(defforeign wb_robot_wait_for_user_input_event webotslib
	"wb_robot_wait_for_user_input_event" () WbUserInputEvent)
	;;  ( WbUserInputEvent :integer)

(defforeign wb_robot_cleanup webotslib
	"wb_robot_cleanup" () :integer)
	;;  ()

(defforeign wb_robot_get_time webotslib
	"wb_robot_get_time" () :float)
	;;  ()

(defforeign wb_robot_get_urdf webotslib
	"wb_robot_get_urdf" () (:string))
	;;  ( :string)

(defforeign wb_robot_get_name webotslib
	"wb_robot_get_name" () (:string))
	;;  ()

(defforeign wb_robot_get_model webotslib
	"wb_robot_get_model" () (:string))
	;;  ()

(defforeign wb_robot_get_custom_data webotslib
	"wb_robot_get_custom_data" () (:string))
	;;  ()

(defforeign wb_robot_set_custom_data webotslib
	"wb_robot_set_custom_data" () :integer)
	;;  ( :string)

(defforeign wb_robot_get_mode webotslib
	"wb_robot_get_mode" () WbRobotMode)
	;;  ()

(defforeign wb_robot_set_mode webotslib
	"wb_robot_set_mode" () :integer)
	;;  ( WbRobotMode :string)

(defforeign wb_robot_get_synchronization webotslib
	"wb_robot_get_synchronization" () :integer)
	;;  ()

(defforeign wb_robot_get_supervisor webotslib
	"wb_robot_get_supervisor" () :integer)
	;;  ()

(defforeign wb_robot_get_project_path webotslib
	"wb_robot_get_project_path" () (:string))
	;;  ()

(defforeign wb_robot_get_world_path webotslib
	"wb_robot_get_world_path" () (:string))
	;;  ()

(defforeign wb_robot_get_basic_time_step webotslib
	"wb_robot_get_basic_time_step" () :float)
	;;  ()

(defforeign wb_robot_get_device webotslib
	"wb_robot_get_device" () :integer)
	;;  ( :string)

(defforeign wb_robot_get_number_of_devices webotslib
	"wb_robot_get_number_of_devices" () :integer)
	;;  ()

(defforeign wb_robot_get_device_by_index webotslib
	"wb_robot_get_device_by_index" () :integer)
	;;  ( :integer)

(defforeign wb_robot_get_type webotslib
	"wb_robot_get_type" () :integer)
	;;  ()

(defforeign wb_robot_battery_sensor_enable webotslib
	"wb_robot_battery_sensor_enable" () :integer)
	;;  ( :integer)

(defforeign wb_robot_battery_sensor_disable webotslib
	"wb_robot_battery_sensor_disable" () :integer)
	;;  ()

(defforeign wb_robot_battery_sensor_get_sampling_period webotslib
	"wb_robot_battery_sensor_get_sampling_period" () :integer)
	;;  ()

(defforeign wb_robot_battery_sensor_get_value webotslib
	"wb_robot_battery_sensor_get_value" () :float)
	;;  ()

(defforeign wb_robot_task_new webotslib
	"wb_robot_task_new" () :integer)
	;;  ( :integer :integer)

(defforeign wb_robot_mutex_new webotslib
	"wb_robot_mutex_new" () (:string))
	;;  ()

(defforeign wb_robot_mutex_lock webotslib
	"wb_robot_mutex_lock" () :integer)
	;;  ( :integer)

(defforeign wb_robot_mutex_unlock webotslib
	"wb_robot_mutex_unlock" () :integer)
	;;  ( :integer)

(defforeign wb_robot_mutex_delete webotslib
	"wb_robot_mutex_delete" () :integer)
	;;  ( :integer)

(defforeign wb_robot_pin_to_static_environment webotslib
	"wb_robot_pin_to_static_environment" () :integer)
	;;  ( :integer)

(defforeign wb_robot_get_controller_name webotslib
	"wb_robot_get_controller_name" () (:string))
	;;  ()

(defforeign wb_robot_get_data webotslib
	"wb_robot_get_data" () (:string))
	;;  ()

(defforeign wb_robot_set_data webotslib
	"wb_robot_set_data" () :integer)
	;;  ( :string)

(defcenum WbNodeType
	:WB_NODE_NO_NODE
	:WB_NODE_APPEARANCE
	:WB_NODE_BACKGROUND
	:WB_NODE_BOX
	:WB_NODE_CAPSULE
	:WB_NODE_COLOR
	:WB_NODE_CONE
	:WB_NODE_COORDINATE
	:WB_NODE_CYLINDER
	:WB_NODE_DIRECTIONAL_LIGHT
	:WB_NODE_ELEVATION_GRID
	:WB_NODE_FOG
	:WB_NODE_GROUP
	:WB_NODE_IMAGE_TEXTURE
	:WB_NODE_INDEXED_FACE_SET
	:WB_NODE_INDEXED_LINE_SET
	:WB_NODE_MATERIAL
	:WB_NODE_MESH
	:WB_NODE_MUSCLE
	:WB_NODE_NORMAL
	:WB_NODE_PBR_APPEARANCE
	:WB_NODE_PLANE
	:WB_NODE_POINT_LIGHT
	:WB_NODE_POINT_SET
	:WB_NODE_SHAPE
	:WB_NODE_SPHERE
	:WB_NODE_SPOT_LIGHT
	:WB_NODE_TEXTURE_COORDINATE
	:WB_NODE_TEXTURE_TRANSFORM
	:WB_NODE_TRANSFORM
	:WB_NODE_VIEWPOINT
	:WB_NODE_ROBOT
	:WB_NODE_DIFFERENTIAL_WHEELS
	:WB_NODE_ACCELEROMETER
	:WB_NODE_BRAKE
	:WB_NODE_CAMERA
	:WB_NODE_COMPASS
	:WB_NODE_CONNECTOR
	:WB_NODE_DISPLAY
	:WB_NODE_DISTANCE_SENSOR
	:WB_NODE_EMITTER
	:WB_NODE_GPS
	:WB_NODE_GYRO
	:WB_NODE_INERTIAL_UNIT
	:WB_NODE_LED
	:WB_NODE_LIDAR
	:WB_NODE_LIGHT_SENSOR
	:WB_NODE_LINEAR_MOTOR
	:WB_NODE_PEN
	:WB_NODE_POSITION_SENSOR
	:WB_NODE_PROPELLER
	:WB_NODE_RADAR
	:WB_NODE_RANGE_FINDER
	:WB_NODE_RECEIVER
	:WB_NODE_ROTATIONAL_MOTOR
	:WB_NODE_SPEAKER
	:WB_NODE_TOUCH_SENSOR
	:WB_NODE_BALL_JOINT
	:WB_NODE_BALL_JOINT_PARAMETERS
	:WB_NODE_CHARGER
	:WB_NODE_CONTACT_PROPERTIES
	:WB_NODE_DAMPING
	:WB_NODE_FLUID
	:WB_NODE_FOCUS
	:WB_NODE_HINGE_JOINT
	:WB_NODE_HINGE_JOINT_PARAMETERS
	:WB_NODE_HINGE_2_JOINT
	:WB_NODE_IMMERSION_PROPERTIES
	:WB_NODE_JOINT_PARAMETERS
	:WB_NODE_LENS
	:WB_NODE_LENS_FLARE
	:WB_NODE_PHYSICS
	:WB_NODE_RECOGNITION
	:WB_NODE_SLIDER_JOINT
	:WB_NODE_SLOT
	:WB_NODE_SOLID
	:WB_NODE_SOLID_REFERENCE
	:WB_NODE_TRACK
	:WB_NODE_TRACK_WHEEL
	:WB_NODE_WORLD_INFO
	:WB_NODE_ZOOM
	:WB_NODE_MICROPHONE
	:WB_NODE_RADIO
	:WB_NODE_SKIN)

(defforeign wb_node_get_name webotslib
	"wb_node_get_name" () (:string))
	;;  ( WbNodeType)

(defforeign wb_accelerometer_enable webotslib
	"wb_accelerometer_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_accelerometer_disable webotslib
	"wb_accelerometer_disable" () :integer)
	;;  ( :integer)

(defforeign wb_accelerometer_get_sampling_period webotslib
	"wb_accelerometer_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_accelerometer_get_lookup_table_size webotslib
	"wb_accelerometer_get_lookup_table_size" () :integer)
	;;  ( :integer)

(defforeign wb_accelerometer_get_lookup_table webotslib
	"wb_accelerometer_get_lookup_table" () :integer)
	;;  ( :integer)

(defforeign wb_accelerometer_get_values webotslib
	"wb_accelerometer_get_values" () :integer)
	;;  ( :integer)

(defforeign wb_brake_set_damping_constant webotslib
	"wb_brake_set_damping_constant" () :integer)
	;;  ( :integer :float)

(defforeign wb_brake_get_type webotslib
	"wb_brake_get_type" () WbJointType)
	;;  ( :integer)

(defforeign wb_brake_get_motor webotslib
	"wb_brake_get_motor" () :integer)
	;;  ( :integer)

(defforeign wb_brake_get_position_sensor webotslib
	"wb_brake_get_position_sensor" () :integer)
	;;  ( :integer)

(defforeign wb_camera_enable webotslib
	"wb_camera_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_camera_disable webotslib
	"wb_camera_disable" () :integer)
	;;  ( :integer)

(defforeign wb_camera_get_sampling_period webotslib
	"wb_camera_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_camera_get_image webotslib
	"wb_camera_get_image" () (:string))
	;;  ( :integer)

(defforeign wb_camera_get_width webotslib
	"wb_camera_get_width" () :integer)
	;;  ( :integer)

(defforeign wb_camera_get_height webotslib
	"wb_camera_get_height" () :integer)
	;;  ( :integer)

(defforeign wb_camera_get_fov webotslib
	"wb_camera_get_fov" () :float)
	;;  ( :integer)

(defforeign wb_camera_get_max_fov webotslib
	"wb_camera_get_max_fov" () :float)
	;;  ( :integer)

(defforeign wb_camera_get_min_fov webotslib
	"wb_camera_get_min_fov" () :float)
	;;  ( :integer)

(defforeign wb_camera_set_fov webotslib
	"wb_camera_set_fov" () :integer)
	;;  ( :integer :float)

(defforeign wb_camera_get_exposure webotslib
	"wb_camera_get_exposure" () :float)
	;;  ( :integer)

(defforeign wb_camera_set_exposure webotslib
	"wb_camera_set_exposure" () :integer)
	;;  ( :integer :float)

(defforeign wb_camera_get_focal_length webotslib
	"wb_camera_get_focal_length" () :float)
	;;  ( :integer)

(defforeign wb_camera_get_focal_distance webotslib
	"wb_camera_get_focal_distance" () :float)
	;;  ( :integer)

(defforeign wb_camera_get_max_focal_distance webotslib
	"wb_camera_get_max_focal_distance" () :float)
	;;  ( :integer)

(defforeign wb_camera_get_min_focal_distance webotslib
	"wb_camera_get_min_focal_distance" () :float)
	;;  ( :integer)

(defforeign wb_camera_set_focal_distance webotslib
	"wb_camera_set_focal_distance" () :integer)
	;;  ( :integer :float)

(defforeign wb_camera_get_near webotslib
	"wb_camera_get_near" () :float)
	;;  ( :integer)

(defforeign wb_camera_save_image webotslib
	"wb_camera_save_image" () :integer)
	;;  ( :integer :string :integer)

(defforeign wb_camera_has_recognition webotslib
	"wb_camera_has_recognition" () :integer)
	;;  ( :integer)

(defforeign wb_camera_recognition_enable webotslib
	"wb_camera_recognition_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_camera_recognition_disable webotslib
	"wb_camera_recognition_disable" () :integer)
	;;  ( :integer)

(defforeign wb_camera_recognition_get_sampling_period webotslib
	"wb_camera_recognition_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_camera_recognition_get_number_of_objects webotslib
	"wb_camera_recognition_get_number_of_objects" () :integer)
	;;  ( :integer)

(defforeign wb_camera_recognition_get_objects webotslib
	"wb_camera_recognition_get_objects" () :integer)
	;;  ( :integer)

(defforeign wb_camera_recognition_has_segmentation webotslib
	"wb_camera_recognition_has_segmentation" () :integer)
	;;  ( :integer)

(defforeign wb_camera_recognition_enable_segmentation webotslib
	"wb_camera_recognition_enable_segmentation" () :integer)
	;;  ( :integer)

(defforeign wb_camera_recognition_disable_segmentation webotslib
	"wb_camera_recognition_disable_segmentation" () :integer)
	;;  ( :integer)

(defforeign wb_camera_recognition_is_segmentation_enabled webotslib
	"wb_camera_recognition_is_segmentation_enabled" () :integer)
	;;  ( :integer)

(defforeign wb_camera_recognition_get_segmentation_image webotslib
	"wb_camera_recognition_get_segmentation_image" () (:string))
	;;  ( :integer)

(defforeign wb_camera_recognition_save_segmentation_image webotslib
	"wb_camera_recognition_save_segmentation_image" () :integer)
	;;  ( :integer :string :integer)

(defforeign wb_compass_enable webotslib
	"wb_compass_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_compass_disable webotslib
	"wb_compass_disable" () :integer)
	;;  ( :integer)

(defforeign wb_compass_get_sampling_period webotslib
	"wb_compass_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_compass_get_lookup_table_size webotslib
	"wb_compass_get_lookup_table_size" () :integer)
	;;  ( :integer)

(defforeign wb_compass_get_lookup_table webotslib
	"wb_compass_get_lookup_table" () :integer)
	;;  ( :integer)

(defforeign wb_compass_get_values webotslib
	"wb_compass_get_values" () :integer)
	;;  ( :integer)

(defforeign wb_connector_enable_presence webotslib
	"wb_connector_enable_presence" () :integer)
	;;  ( :integer :integer)

(defforeign wb_connector_disable_presence webotslib
	"wb_connector_disable_presence" () :integer)
	;;  ( :integer)

(defforeign wb_connector_get_presence_sampling_period webotslib
	"wb_connector_get_presence_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_connector_get_presence webotslib
	"wb_connector_get_presence" () :integer)
	;;  ( :integer)

(defforeign wb_connector_lock webotslib
	"wb_connector_lock" () :integer)
	;;  ( :integer)

(defforeign wb_connector_unlock webotslib
	"wb_connector_unlock" () :integer)
	;;  ( :integer)

(defforeign wb_connector_is_locked webotslib
	"wb_connector_is_locked" () :integer)
	;;  ( :integer)
(defconstant WB_STDOUT 0)
(defconstant WB_STDERR 1)

(defforeign wb_console_print webotslib
	"wb_console_print" () :integer)
	;;  ( :string :integer)

(defforeign wb_device_get_name webotslib
	"wb_device_get_name" () (:string))
	;;  ( :integer)

(defforeign wb_device_get_model webotslib
	"wb_device_get_model" () (:string))
	;;  ( :integer)

(defforeign wb_device_get_node_type webotslib
	"wb_device_get_node_type" () WbNodeType)
	;;  ( :integer)

(defforeign wb_device_get_type webotslib
	"wb_device_get_type" () WbNodeType)
	;;  ( :integer)

(defforeign wb_differential_wheels_set_speed webotslib
	"wb_differential_wheels_set_speed" () :integer)
	;;  ( :float :float)

(defforeign wb_differential_wheels_get_left_speed webotslib
	"wb_differential_wheels_get_left_speed" () :float)
	;;  ()

(defforeign wb_differential_wheels_get_right_speed webotslib
	"wb_differential_wheels_get_right_speed" () :float)
	;;  ()

(defforeign wb_differential_wheels_get_max_speed webotslib
	"wb_differential_wheels_get_max_speed" () :float)
	;;  ()

(defforeign wb_differential_wheels_get_speed_unit webotslib
	"wb_differential_wheels_get_speed_unit" () :float)
	;;  ()

(defforeign wb_differential_wheels_enable_encoders webotslib
	"wb_differential_wheels_enable_encoders" () :integer)
	;;  ( :integer)

(defforeign wb_differential_wheels_disable_encoders webotslib
	"wb_differential_wheels_disable_encoders" () :integer)
	;;  ()

(defforeign wb_differential_wheels_get_encoders_sampling_period webotslib
	"wb_differential_wheels_get_encoders_sampling_period" () :integer)
	;;  ()

(defforeign wb_differential_wheels_get_left_encoder webotslib
	"wb_differential_wheels_get_left_encoder" () :float)
	;;  ()

(defforeign wb_differential_wheels_get_right_encoder webotslib
	"wb_differential_wheels_get_right_encoder" () :float)
	;;  ()

(defforeign wb_differential_wheels_set_encoders webotslib
	"wb_differential_wheels_set_encoders" () :integer)
	;;  ( :float :float)

(defforeign wb_display_get_width webotslib
	"wb_display_get_width" () :integer)
	;;  ( :integer)

(defforeign wb_display_get_height webotslib
	"wb_display_get_height" () :integer)
	;;  ( :integer)

(defforeign wb_display_set_color webotslib
	"wb_display_set_color" () :integer)
	;;  ( :integer :integer)

(defforeign wb_display_set_alpha webotslib
	"wb_display_set_alpha" () :integer)
	;;  ( :integer :float)

(defforeign wb_display_set_opacity webotslib
	"wb_display_set_opacity" () :integer)
	;;  ( :integer :float)

(defforeign wb_display_set_font webotslib
	"wb_display_set_font" () :integer)
	;;  ( :integer :string :integer :integer)

(defforeign wb_display_attach_camera webotslib
	"wb_display_attach_camera" () :integer)
	;;  ( :integer :integer)

(defforeign wb_display_detach_camera webotslib
	"wb_display_detach_camera" () :integer)
	;;  ( :integer)

(defforeign wb_display_draw_pixel webotslib
	"wb_display_draw_pixel" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_display_draw_line webotslib
	"wb_display_draw_line" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign wb_display_draw_rectangle webotslib
	"wb_display_draw_rectangle" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign wb_display_draw_oval webotslib
	"wb_display_draw_oval" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign wb_display_draw_polygon webotslib
	"wb_display_draw_polygon" () :integer)
	;;  ( :integer :integer :integer :integer)

(defforeign wb_display_draw_text webotslib
	"wb_display_draw_text" () :integer)
	;;  ( :integer :string :integer :integer)

(defforeign wb_display_fill_rectangle webotslib
	"wb_display_fill_rectangle" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign wb_display_fill_oval webotslib
	"wb_display_fill_oval" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign wb_display_fill_polygon webotslib
	"wb_display_fill_polygon" () :integer)
	;;  ( :integer :integer :integer :integer)
(defconstant WB_IMAGE_RGB 3)
(defconstant WB_IMAGE_RGBA 4)
(defconstant WB_IMAGE_ARGB 5)
(defconstant WB_IMAGE_BGRA 6)
(defconstant WB_IMAGE_ABGR 7)

(defforeign wb_display_image_new webotslib
	"wb_display_image_new" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign wb_display_image_copy webotslib
	"wb_display_image_copy" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign wb_display_image_load webotslib
	"wb_display_image_load" () :integer)
	;;  ( :integer :string)

(defforeign wb_display_image_delete webotslib
	"wb_display_image_delete" () :integer)
	;;  ( :integer :integer)

(defforeign wb_display_image_paste webotslib
	"wb_display_image_paste" () :integer)
	;;  ( :integer :integer :integer :integer :integer)

(defforeign wb_display_image_save webotslib
	"wb_display_image_save" () :integer)
	;;  ( :integer :integer :string)

(defforeign wb_distance_sensor_enable webotslib
	"wb_distance_sensor_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_distance_sensor_disable webotslib
	"wb_distance_sensor_disable" () :integer)
	;;  ( :integer)

(defforeign wb_distance_sensor_get_sampling_period webotslib
	"wb_distance_sensor_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_distance_sensor_get_value webotslib
	"wb_distance_sensor_get_value" () :float)
	;;  ( :integer)

(defforeign wb_distance_sensor_get_max_value webotslib
	"wb_distance_sensor_get_max_value" () :float)
	;;  ( :integer)

(defforeign wb_distance_sensor_get_min_value webotslib
	"wb_distance_sensor_get_min_value" () :float)
	;;  ( :integer)

(defforeign wb_distance_sensor_get_aperture webotslib
	"wb_distance_sensor_get_aperture" () :float)
	;;  ( :integer)

(defforeign wb_distance_sensor_get_lookup_table_size webotslib
	"wb_distance_sensor_get_lookup_table_size" () :integer)
	;;  ( :integer)

(defforeign wb_distance_sensor_get_lookup_table webotslib
	"wb_distance_sensor_get_lookup_table" () :integer)
	;;  ( :integer)

(defcenum WbDistanceSensorType
	(:WB_DISTANCE_SENSOR_GENERIC 0)
	:WB_DISTANCE_SENSOR_INFRA_RED
	:WB_DISTANCE_SENSOR_SONAR
	:WB_DISTANCE_SENSOR_LASER)

(defforeign wb_distance_sensor_get_type webotslib
	"wb_distance_sensor_get_type" () WbDistanceSensorType)
	;;  ( :integer)
(defconstant WB_CHANNEL_BROADCAST -1)

(defforeign wb_emitter_send webotslib
	"wb_emitter_send" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_emitter_get_buffer_size webotslib
	"wb_emitter_get_buffer_size" () :integer)
	;;  ( :integer)

(defforeign wb_emitter_set_channel webotslib
	"wb_emitter_set_channel" () :integer)
	;;  ( :integer :integer)

(defforeign wb_emitter_get_channel webotslib
	"wb_emitter_get_channel" () :integer)
	;;  ( :integer)

(defforeign wb_emitter_get_range webotslib
	"wb_emitter_get_range" () :float)
	;;  ( :integer)

(defforeign wb_emitter_set_range webotslib
	"wb_emitter_set_range" () :integer)
	;;  ( :integer :float)

(defforeign wb_gps_enable webotslib
	"wb_gps_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_gps_disable webotslib
	"wb_gps_disable" () :integer)
	;;  ( :integer)

(defforeign wb_gps_get_sampling_period webotslib
	"wb_gps_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_gps_get_speed webotslib
	"wb_gps_get_speed" () :float)
	;;  ( :integer)

(defforeign wb_gps_get_values webotslib
	"wb_gps_get_values" () :integer)
	;;  ( :integer)

(defforeign wb_gps_convert_to_degrees_minutes_seconds webotslib
	"wb_gps_convert_to_degrees_minutes_seconds" () (:string))
	;;  ( :float)

(defcenum WbGpsCoordinateSystem
	(:WB_GPS_LOCAL_COORDINATE 0)
	:WB_GPS_WGS84_COORDINATE)

(defforeign wb_gps_get_coordinate_system webotslib
	"wb_gps_get_coordinate_system" () WbGpsCoordinateSystem)
	;;  ( :integer)

(defforeign wb_gyro_enable webotslib
	"wb_gyro_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_gyro_disable webotslib
	"wb_gyro_disable" () :integer)
	;;  ( :integer)

(defforeign wb_gyro_get_sampling_period webotslib
	"wb_gyro_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_gyro_get_lookup_table_size webotslib
	"wb_gyro_get_lookup_table_size" () :integer)
	;;  ( :integer)

(defforeign wb_gyro_get_lookup_table webotslib
	"wb_gyro_get_lookup_table" () :integer)
	;;  ( :integer)

(defforeign wb_gyro_get_values webotslib
	"wb_gyro_get_values" () :integer)
	;;  ( :integer)

(defforeign wb_inertial_unit_enable webotslib
	"wb_inertial_unit_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_inertial_unit_disable webotslib
	"wb_inertial_unit_disable" () :integer)
	;;  ( :integer)

(defforeign wb_inertial_unit_get_sampling_period webotslib
	"wb_inertial_unit_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_inertial_unit_get_noise webotslib
	"wb_inertial_unit_get_noise" () :float)
	;;  ( :integer)

(defforeign wb_inertial_unit_get_roll_pitch_yaw webotslib
	"wb_inertial_unit_get_roll_pitch_yaw" () :integer)
	;;  ( :integer)

(defforeign wb_inertial_unit_get_quaternion webotslib
	"wb_inertial_unit_get_quaternion" () :integer)
	;;  ( :integer)

(defforeign wb_joystick_enable webotslib
	"wb_joystick_enable" () :integer)
	;;  ( :integer)

(defforeign wb_joystick_disable webotslib
	"wb_joystick_disable" () :integer)
	;;  ()

(defforeign wb_joystick_get_sampling_period webotslib
	"wb_joystick_get_sampling_period" () :integer)
	;;  ()

(defforeign wb_joystick_is_connected webotslib
	"wb_joystick_is_connected" () :integer)
	;;  ()

(defforeign wb_joystick_get_model webotslib
	"wb_joystick_get_model" () (:string))
	;;  ()

(defforeign wb_joystick_get_number_of_axes webotslib
	"wb_joystick_get_number_of_axes" () :integer)
	;;  ()

(defforeign wb_joystick_get_axis_value webotslib
	"wb_joystick_get_axis_value" () :integer)
	;;  ( :integer)

(defforeign wb_joystick_get_number_of_povs webotslib
	"wb_joystick_get_number_of_povs" () :integer)
	;;  ()

(defforeign wb_joystick_get_pov_value webotslib
	"wb_joystick_get_pov_value" () :integer)
	;;  ( :integer)

(defforeign wb_joystick_get_pressed_button webotslib
	"wb_joystick_get_pressed_button" () :integer)
	;;  ()

(defforeign wb_joystick_set_constant_force webotslib
	"wb_joystick_set_constant_force" () :integer)
	;;  ( :integer)

(defforeign wb_joystick_set_constant_force_duration webotslib
	"wb_joystick_set_constant_force_duration" () :integer)
	;;  ( :float)

(defforeign wb_joystick_set_auto_centering_gain webotslib
	"wb_joystick_set_auto_centering_gain" () :integer)
	;;  ( :float)

(defforeign wb_joystick_set_resistance_gain webotslib
	"wb_joystick_set_resistance_gain" () :integer)
	;;  ( :float)

(defforeign wb_joystick_set_force_axis webotslib
	"wb_joystick_set_force_axis" () :integer)
	;;  ( :integer)

(defforeign wb_led_set webotslib
	"wb_led_set" () :integer)
	;;  ( :integer :integer)

(defforeign wb_led_get webotslib
	"wb_led_get" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_enable webotslib
	"wb_lidar_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_lidar_enable_point_cloud webotslib
	"wb_lidar_enable_point_cloud" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_disable webotslib
	"wb_lidar_disable" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_disable_point_cloud webotslib
	"wb_lidar_disable_point_cloud" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_get_sampling_period webotslib
	"wb_lidar_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_is_point_cloud_enabled webotslib
	"wb_lidar_is_point_cloud_enabled" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_get_range_image webotslib
	"wb_lidar_get_range_image" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_get_layer_range_image webotslib
	"wb_lidar_get_layer_range_image" () :integer)
	;;  ( :integer :integer)

(defforeign wb_lidar_get_point_cloud webotslib
	"wb_lidar_get_point_cloud" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_get_layer_point_cloud webotslib
	"wb_lidar_get_layer_point_cloud" () :integer)
	;;  ( :integer :integer)

(defforeign wb_lidar_get_number_of_points webotslib
	"wb_lidar_get_number_of_points" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_get_horizontal_resolution webotslib
	"wb_lidar_get_horizontal_resolution" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_get_number_of_layers webotslib
	"wb_lidar_get_number_of_layers" () :integer)
	;;  ( :integer)

(defforeign wb_lidar_get_min_frequency webotslib
	"wb_lidar_get_min_frequency" () :float)
	;;  ( :integer)

(defforeign wb_lidar_get_max_frequency webotslib
	"wb_lidar_get_max_frequency" () :float)
	;;  ( :integer)

(defforeign wb_lidar_get_frequency webotslib
	"wb_lidar_get_frequency" () :float)
	;;  ( :integer)

(defforeign wb_lidar_set_frequency webotslib
	"wb_lidar_set_frequency" () :integer)
	;;  ( :integer :float)

(defforeign wb_lidar_get_fov webotslib
	"wb_lidar_get_fov" () :float)
	;;  ( :integer)

(defforeign wb_lidar_get_vertical_fov webotslib
	"wb_lidar_get_vertical_fov" () :float)
	;;  ( :integer)

(defforeign wb_lidar_get_min_range webotslib
	"wb_lidar_get_min_range" () :float)
	;;  ( :integer)

(defforeign wb_lidar_get_max_range webotslib
	"wb_lidar_get_max_range" () :float)
	;;  ( :integer)

(defcstruct WbLidarPoint
	(x :float)
	(y :float)
	(z :float)
	(layer_id :integer)
	(time :float))

(defforeign wb_light_sensor_enable webotslib
	"wb_light_sensor_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_light_sensor_disable webotslib
	"wb_light_sensor_disable" () :integer)
	;;  ( :integer)

(defforeign wb_light_sensor_get_sampling_period webotslib
	"wb_light_sensor_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_light_sensor_get_lookup_table_size webotslib
	"wb_light_sensor_get_lookup_table_size" () :integer)
	;;  ( :integer)

(defforeign wb_light_sensor_get_lookup_table webotslib
	"wb_light_sensor_get_lookup_table" () :integer)
	;;  ( :integer)

(defforeign wb_light_sensor_get_value webotslib
	"wb_light_sensor_get_value" () :float)
	;;  ( :integer)

(defforeign wb_microphone_enable webotslib
	"wb_microphone_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_microphone_disable webotslib
	"wb_microphone_disable" () :integer)
	;;  ( :integer)

(defforeign wb_microphone_get_sampling_period webotslib
	"wb_microphone_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_microphone_get_sample_data webotslib
	"wb_microphone_get_sample_data" () (:string))
	;;  ( :integer)

(defforeign wb_microphone_get_sample_size webotslib
	"wb_microphone_get_sample_size" () :integer)
	;;  ( :integer)

(defforeign wb_motor_set_position webotslib
	"wb_motor_set_position" () :integer)
	;;  ( :integer :float)

(defforeign wb_motor_set_acceleration webotslib
	"wb_motor_set_acceleration" () :integer)
	;;  ( :integer :float)

(defforeign wb_motor_set_velocity webotslib
	"wb_motor_set_velocity" () :integer)
	;;  ( :integer :float)

(defforeign wb_motor_set_force webotslib
	"wb_motor_set_force" () :integer)
	;;  ( :integer :float)

(defforeign wb_motor_set_torque webotslib
	"wb_motor_set_torque" () :integer)
	;;  ( :integer :float)

(defforeign wb_motor_set_available_force webotslib
	"wb_motor_set_available_force" () :integer)
	;;  ( :integer :float)

(defforeign wb_motor_set_available_torque webotslib
	"wb_motor_set_available_torque" () :integer)
	;;  ( :integer :float)

(defforeign wb_motor_set_control_pid webotslib
	"wb_motor_set_control_pid" () :integer)
	;;  ( :integer :float :float :float)

(defforeign wb_motor_enable_force_feedback webotslib
	"wb_motor_enable_force_feedback" () :integer)
	;;  ( :integer :integer)

(defforeign wb_motor_disable_force_feedback webotslib
	"wb_motor_disable_force_feedback" () :integer)
	;;  ( :integer)

(defforeign wb_motor_get_force_feedback_sampling_period webotslib
	"wb_motor_get_force_feedback_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_motor_get_force_feedback webotslib
	"wb_motor_get_force_feedback" () :float)
	;;  ( :integer)

(defforeign wb_motor_enable_torque_feedback webotslib
	"wb_motor_enable_torque_feedback" () :integer)
	;;  ( :integer :integer)

(defforeign wb_motor_disable_torque_feedback webotslib
	"wb_motor_disable_torque_feedback" () :integer)
	;;  ( :integer)

(defforeign wb_motor_get_torque_feedback_sampling_period webotslib
	"wb_motor_get_torque_feedback_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_motor_get_torque_feedback webotslib
	"wb_motor_get_torque_feedback" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_type webotslib
	"wb_motor_get_type" () WbJointType)
	;;  ( :integer)

(defforeign wb_motor_get_target_position webotslib
	"wb_motor_get_target_position" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_min_position webotslib
	"wb_motor_get_min_position" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_max_position webotslib
	"wb_motor_get_max_position" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_velocity webotslib
	"wb_motor_get_velocity" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_max_velocity webotslib
	"wb_motor_get_max_velocity" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_acceleration webotslib
	"wb_motor_get_acceleration" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_available_force webotslib
	"wb_motor_get_available_force" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_max_force webotslib
	"wb_motor_get_max_force" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_available_torque webotslib
	"wb_motor_get_available_torque" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_max_torque webotslib
	"wb_motor_get_max_torque" () :float)
	;;  ( :integer)

(defforeign wb_motor_get_brake webotslib
	"wb_motor_get_brake" () :integer)
	;;  ( :integer)

(defforeign wb_motor_get_position_sensor webotslib
	"wb_motor_get_position_sensor" () :integer)
	;;  ( :integer)

(defforeign wb_mouse_enable webotslib
	"wb_mouse_enable" () :integer)
	;;  ( :integer)

(defforeign wb_mouse_disable webotslib
	"wb_mouse_disable" () :integer)
	;;  ()

(defforeign wb_mouse_get_sampling_period webotslib
	"wb_mouse_get_sampling_period" () :integer)
	;;  ()

(defforeign wb_mouse_enable_3d_position webotslib
	"wb_mouse_enable_3d_position" () :integer)
	;;  ()

(defforeign wb_mouse_disable_3d_position webotslib
	"wb_mouse_disable_3d_position" () :integer)
	;;  ()

(defforeign wb_mouse_is_3d_position_enabled webotslib
	"wb_mouse_is_3d_position_enabled" () :integer)
	;;  ()

(defforeign wb_mouse_get_state webotslib
	"wb_mouse_get_state" () :integer)
	;;  ()

(defcstruct WbMouseState
	(left :integer)
	(middle :integer)
	(right :integer)
	(u :float)
	(v :float)
	(x :float)
	(y :float)
	(z :float))

(defforeign wb_pen_write webotslib
	"wb_pen_write" () :integer)
	;;  ( :integer :integer)

(defforeign wb_pen_set_ink_color webotslib
	"wb_pen_set_ink_color" () :integer)
	;;  ( :integer :integer :float)

(defforeign wb_position_sensor_enable webotslib
	"wb_position_sensor_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_position_sensor_disable webotslib
	"wb_position_sensor_disable" () :integer)
	;;  ( :integer)

(defforeign wb_position_sensor_get_sampling_period webotslib
	"wb_position_sensor_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_position_sensor_get_value webotslib
	"wb_position_sensor_get_value" () :float)
	;;  ( :integer)

(defforeign wb_position_sensor_get_type webotslib
	"wb_position_sensor_get_type" () WbJointType)
	;;  ( :integer)

(defforeign wb_position_sensor_get_motor webotslib
	"wb_position_sensor_get_motor" () :integer)
	;;  ( :integer)

(defforeign wb_position_sensor_get_brake webotslib
	"wb_position_sensor_get_brake" () :integer)
	;;  ( :integer)

(defforeign wb_radar_enable webotslib
	"wb_radar_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_radar_disable webotslib
	"wb_radar_disable" () :integer)
	;;  ( :integer)

(defforeign wb_radar_get_sampling_period webotslib
	"wb_radar_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_radar_get_number_of_targets webotslib
	"wb_radar_get_number_of_targets" () :integer)
	;;  ( :integer)

(defforeign wb_radar_get_targets webotslib
	"wb_radar_get_targets" () :integer)
	;;  ( :integer)

(defforeign wb_radar_get_min_range webotslib
	"wb_radar_get_min_range" () :float)
	;;  ( :integer)

(defforeign wb_radar_get_max_range webotslib
	"wb_radar_get_max_range" () :float)
	;;  ( :integer)

(defforeign wb_radar_get_horizontal_fov webotslib
	"wb_radar_get_horizontal_fov" () :float)
	;;  ( :integer)

(defforeign wb_radar_get_vertical_fov webotslib
	"wb_radar_get_vertical_fov" () :float)
	;;  ( :integer)

(defcstruct WbRadarTarget
	(distance :float)
	(received_power :float)
	(speed :float)
	(azimuth :float))

(defforeign wb_radio_message_new webotslib
	"wb_radio_message_new" () (:string))
	;;  ( :integer :string :string)

(defforeign wb_radio_message_delete webotslib
	"wb_radio_message_delete" () :integer)
	;;  ( :integer)

(defforeign wb_radio_message_get_destination webotslib
	"wb_radio_message_get_destination" () (:string))
	;;  ( :integer)

(defforeign wb_radio_message_get_length webotslib
	"wb_radio_message_get_length" () :integer)
	;;  ( :integer)

(defforeign wb_radio_message_get_body webotslib
	"wb_radio_message_get_body" () (:string))
	;;  ( :integer)

(defforeign wb_radio_enable webotslib
	"wb_radio_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_radio_disable webotslib
	"wb_radio_disable" () :integer)
	;;  ( :integer)

(defforeign wb_radio_set_address webotslib
	"wb_radio_set_address" () :integer)
	;;  ( :integer :string)

(defforeign wb_radio_get_address webotslib
	"wb_radio_get_address" () (:string))
	;;  ( :integer)

(defforeign wb_radio_set_frequency webotslib
	"wb_radio_set_frequency" () :integer)
	;;  ( :integer :float)

(defforeign wb_radio_get_frequency webotslib
	"wb_radio_get_frequency" () :float)
	;;  ( :integer)

(defforeign wb_radio_set_channel webotslib
	"wb_radio_set_channel" () :integer)
	;;  ( :integer :integer)

(defforeign wb_radio_get_channel webotslib
	"wb_radio_get_channel" () :integer)
	;;  ( :integer)

(defforeign wb_radio_set_bitrate webotslib
	"wb_radio_set_bitrate" () :integer)
	;;  ( :integer :integer)

(defforeign wb_radio_get_bitrate webotslib
	"wb_radio_get_bitrate" () :integer)
	;;  ( :integer)

(defforeign wb_radio_set_rx_sensitivity webotslib
	"wb_radio_set_rx_sensitivity" () :integer)
	;;  ( :integer :float)

(defforeign wb_radio_get_rx_sensitivity webotslib
	"wb_radio_get_rx_sensitivity" () :float)
	;;  ( :integer)

(defforeign wb_radio_set_tx_power webotslib
	"wb_radio_set_tx_power" () :integer)
	;;  ( :integer :float)

(defforeign wb_radio_get_tx_power webotslib
	"wb_radio_get_tx_power" () :float)
	;;  ( :integer)

(defforeign wb_radio_set_callback webotslib
	"wb_radio_set_callback" () :integer)
	;;  ( :integer :integer)

(defforeign wb_radio_event_get_radio webotslib
	"wb_radio_event_get_radio" () :integer)
	;;  ( :integer)

(defforeign wb_radio_event_get_data webotslib
	"wb_radio_event_get_data" () (:string))
	;;  ( :integer)

(defforeign wb_radio_event_get_data_size webotslib
	"wb_radio_event_get_data_size" () :integer)
	;;  ( :integer)

(defforeign wb_radio_event_get_emitter webotslib
	"wb_radio_event_get_emitter" () (:string))
	;;  ( :integer)

(defforeign wb_radio_event_get_rssi webotslib
	"wb_radio_event_get_rssi" () :float)
	;;  ( :integer)

(defforeign wb_radio_send webotslib
	"wb_radio_send" () :integer)
	;;  ( :integer :integer :float)

(defforeign wb_receiver_enable webotslib
	"wb_receiver_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_receiver_disable webotslib
	"wb_receiver_disable" () :integer)
	;;  ( :integer)

(defforeign wb_receiver_get_sampling_period webotslib
	"wb_receiver_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_receiver_set_channel webotslib
	"wb_receiver_set_channel" () :integer)
	;;  ( :integer :integer)

(defforeign wb_receiver_get_channel webotslib
	"wb_receiver_get_channel" () :integer)
	;;  ( :integer)

(defforeign wb_receiver_get_queue_length webotslib
	"wb_receiver_get_queue_length" () :integer)
	;;  ( :integer)

(defforeign wb_receiver_next_packet webotslib
	"wb_receiver_next_packet" () :integer)
	;;  ( :integer)

(defforeign wb_receiver_get_data_size webotslib
	"wb_receiver_get_data_size" () :integer)
	;;  ( :integer)

(defforeign wb_receiver_get_data webotslib
	"wb_receiver_get_data" () (:string))
	;;  ( :integer)

(defforeign wb_receiver_get_signal_strength webotslib
	"wb_receiver_get_signal_strength" () :float)
	;;  ( :integer)

(defforeign wb_receiver_get_emitter_direction webotslib
	"wb_receiver_get_emitter_direction" () :integer)
	;;  ( :integer)

(defforeign wb_robot_window_custom_function webotslib
	"wb_robot_window_custom_function" () (:string))
	;;  ( :integer)

(defforeign wb_robot_wwi_send webotslib
	"wb_robot_wwi_send" () :integer)
	;;  ( :string :integer)

(defforeign wb_robot_wwi_receive webotslib
	"wb_robot_wwi_receive" () (:string))
	;;  ( :integer)

(defforeign wb_skin_set_bone_orientation webotslib
	"wb_skin_set_bone_orientation" () :integer)
	;;  ( :integer :integer :integer :integer)

(defforeign wb_skin_set_bone_position webotslib
	"wb_skin_set_bone_position" () :integer)
	;;  ( :integer :integer :integer :integer)

(defforeign wb_skin_get_bone_count webotslib
	"wb_skin_get_bone_count" () :integer)
	;;  ( :integer)

(defforeign wb_skin_get_bone_name webotslib
	"wb_skin_get_bone_name" () (:string))
	;;  ( :integer :integer)

(defforeign wb_skin_get_bone_orientation webotslib
	"wb_skin_get_bone_orientation" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_skin_get_bone_position webotslib
	"wb_skin_get_bone_position" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_speaker_play_sound webotslib
	"wb_speaker_play_sound" () :integer)
	;;  ( :integer :integer :string :float :float :float :integer)

(defforeign wb_speaker_stop webotslib
	"wb_speaker_stop" () :integer)
	;;  ( :integer :string)

(defforeign wb_speaker_is_sound_playing webotslib
	"wb_speaker_is_sound_playing" () :integer)
	;;  ( :integer :string)

(defforeign wb_speaker_set_engine webotslib
	"wb_speaker_set_engine" () :integer)
	;;  ( :integer :string)

(defforeign wb_speaker_set_language webotslib
	"wb_speaker_set_language" () :integer)
	;;  ( :integer :string)

(defforeign wb_speaker_get_engine webotslib
	"wb_speaker_get_engine" () (:string))
	;;  ( :integer)

(defforeign wb_speaker_get_language webotslib
	"wb_speaker_get_language" () (:string))
	;;  ( :integer)

(defforeign wb_speaker_speak webotslib
	"wb_speaker_speak" () :integer)
	;;  ( :integer :string :float)

(defforeign wb_speaker_is_speaking webotslib
	"wb_speaker_is_speaking" () :integer)
	;;  ( :integer)

(defcenum WbFieldType
	(:WB_NO_FIELD #x00)
	(:WB_SF_BOOL #x01)
	:WB_SF_INT32
	:WB_SF_FLOAT
	:WB_SF_VEC2F
	:WB_SF_VEC3F
	:WB_SF_ROTATION
	:WB_SF_COLOR
	:WB_SF_STRING
	:WB_SF_NODE
	(:WB_MF #x10)
	:WB_MF_BOOL
	:WB_MF_INT32
	:WB_MF_FLOAT
	:WB_MF_VEC2F
	:WB_MF_VEC3F
	:WB_MF_ROTATION
	:WB_MF_COLOR
	:WB_MF_STRING
	:WB_MF_NODE)

(defcenum WbSimulationMode
	(:WB_SUPERVISOR_SIMULATION_MODE_PAUSE 0)
	:WB_SUPERVISOR_SIMULATION_MODE_REAL_TIME
	:WB_SUPERVISOR_SIMULATION_MODE_FAST)

(defforeign wb_supervisor_world_load webotslib
	"wb_supervisor_world_load" () :integer)
	;;  ( :string)

(defforeign wb_supervisor_world_save webotslib
	"wb_supervisor_world_save" () :integer)
	;;  ( :string)

(defforeign wb_supervisor_world_reload webotslib
	"wb_supervisor_world_reload" () :integer)
	;;  ()

(defforeign wb_supervisor_simulation_quit webotslib
	"wb_supervisor_simulation_quit" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_simulation_reset webotslib
	"wb_supervisor_simulation_reset" () :integer)
	;;  ()

(defforeign wb_supervisor_simulation_reset_physics webotslib
	"wb_supervisor_simulation_reset_physics" () :integer)
	;;  ()

(defforeign wb_supervisor_simulation_get_mode webotslib
	"wb_supervisor_simulation_get_mode" () WbSimulationMode)
	;;  ()

(defforeign wb_supervisor_simulation_set_mode webotslib
	"wb_supervisor_simulation_set_mode" () :integer)
	;;  ( WbSimulationMode)

(defforeign wb_supervisor_set_label webotslib
	"wb_supervisor_set_label" () :integer)
	;;  ( :integer :string :float :float :float :integer :float :string)

(defforeign wb_supervisor_export_image webotslib
	"wb_supervisor_export_image" () :integer)
	;;  ( :string :integer)

(defforeign wb_supervisor_movie_start_recording webotslib
	"wb_supervisor_movie_start_recording" () :integer)
	;;  ( :string :integer :integer :integer :integer :integer :integer)

(defforeign wb_supervisor_movie_stop_recording webotslib
	"wb_supervisor_movie_stop_recording" () :integer)
	;;  ()

(defforeign wb_supervisor_movie_is_ready webotslib
	"wb_supervisor_movie_is_ready" () :integer)
	;;  ()

(defforeign wb_supervisor_movie_failed webotslib
	"wb_supervisor_movie_failed" () :integer)
	;;  ()

(defforeign wb_supervisor_animation_start_recording webotslib
	"wb_supervisor_animation_start_recording" () :integer)
	;;  ( :string)

(defforeign wb_supervisor_animation_stop_recording webotslib
	"wb_supervisor_animation_stop_recording" () :integer)
	;;  ()

(defforeign wb_supervisor_node_get_root webotslib
	"wb_supervisor_node_get_root" () :integer)
	;;  ()

(defforeign wb_supervisor_node_get_self webotslib
	"wb_supervisor_node_get_self" () :integer)
	;;  ()

(defforeign wb_supervisor_node_get_id webotslib
	"wb_supervisor_node_get_id" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_from_id webotslib
	"wb_supervisor_node_get_from_id" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_from_device webotslib
	"wb_supervisor_node_get_from_device" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_from_def webotslib
	"wb_supervisor_node_get_from_def" () :integer)
	;;  ( :string)

(defforeign wb_supervisor_node_get_from_proto_def webotslib
	"wb_supervisor_node_get_from_proto_def" () :integer)
	;;  ( :integer :string)

(defforeign wb_supervisor_node_get_parent_node webotslib
	"wb_supervisor_node_get_parent_node" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_selected webotslib
	"wb_supervisor_node_get_selected" () :integer)
	;;  ()

(defforeign wb_supervisor_node_get_type webotslib
	"wb_supervisor_node_get_type" () WbNodeType)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_field webotslib
	"wb_supervisor_node_get_field" () :integer)
	;;  ( :integer :string)

(defforeign wb_supervisor_node_get_proto_field webotslib
	"wb_supervisor_node_get_proto_field" () :integer)
	;;  ( :integer :string)

(defforeign wb_supervisor_node_remove webotslib
	"wb_supervisor_node_remove" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_def webotslib
	"wb_supervisor_node_get_def" () (:string))
	;;  ( :integer)

(defforeign wb_supervisor_node_get_type_name webotslib
	"wb_supervisor_node_get_type_name" () (:string))
	;;  ( :integer)

(defforeign wb_supervisor_node_get_base_type_name webotslib
	"wb_supervisor_node_get_base_type_name" () (:string))
	;;  ( :integer)

(defforeign wb_supervisor_node_is_proto webotslib
	"wb_supervisor_node_is_proto" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_center_of_mass webotslib
	"wb_supervisor_node_get_center_of_mass" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_contact_point webotslib
	"wb_supervisor_node_get_contact_point" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_node_get_contact_point_node webotslib
	"wb_supervisor_node_get_contact_point_node" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_node_get_number_of_contact_points webotslib
	"wb_supervisor_node_get_number_of_contact_points" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_node_get_orientation webotslib
	"wb_supervisor_node_get_orientation" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_position webotslib
	"wb_supervisor_node_get_position" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_static_balance webotslib
	"wb_supervisor_node_get_static_balance" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_get_velocity webotslib
	"wb_supervisor_node_get_velocity" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_set_velocity webotslib
	"wb_supervisor_node_set_velocity" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_node_reset_physics webotslib
	"wb_supervisor_node_reset_physics" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_restart_controller webotslib
	"wb_supervisor_node_restart_controller" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_move_viewpoint webotslib
	"wb_supervisor_node_move_viewpoint" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_node_set_visibility webotslib
	"wb_supervisor_node_set_visibility" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_node_add_force webotslib
	"wb_supervisor_node_add_force" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_node_add_force_with_offset webotslib
	"wb_supervisor_node_add_force_with_offset" () :integer)
	;;  ( :integer :integer :integer :integer)

(defforeign wb_supervisor_node_add_torque webotslib
	"wb_supervisor_node_add_torque" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_get_type webotslib
	"wb_supervisor_field_get_type" () WbFieldType)
	;;  ( :integer)

(defforeign wb_supervisor_field_get_type_name webotslib
	"wb_supervisor_field_get_type_name" () (:string))
	;;  ( :integer)

(defforeign wb_supervisor_field_get_count webotslib
	"wb_supervisor_field_get_count" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_field_get_sf_bool webotslib
	"wb_supervisor_field_get_sf_bool" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_field_get_sf_int32 webotslib
	"wb_supervisor_field_get_sf_int32" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_field_get_sf_float webotslib
	"wb_supervisor_field_get_sf_float" () :float)
	;;  ( :integer)

(defforeign wb_supervisor_field_get_sf_vec2f webotslib
	"wb_supervisor_field_get_sf_vec2f" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_field_get_sf_vec3f webotslib
	"wb_supervisor_field_get_sf_vec3f" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_field_get_sf_rotation webotslib
	"wb_supervisor_field_get_sf_rotation" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_field_get_sf_color webotslib
	"wb_supervisor_field_get_sf_color" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_field_get_sf_string webotslib
	"wb_supervisor_field_get_sf_string" () (:string))
	;;  ( :integer)

(defforeign wb_supervisor_field_get_sf_node webotslib
	"wb_supervisor_field_get_sf_node" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_field_get_mf_bool webotslib
	"wb_supervisor_field_get_mf_bool" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_get_mf_int32 webotslib
	"wb_supervisor_field_get_mf_int32" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_get_mf_float webotslib
	"wb_supervisor_field_get_mf_float" () :float)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_get_mf_vec2f webotslib
	"wb_supervisor_field_get_mf_vec2f" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_get_mf_vec3f webotslib
	"wb_supervisor_field_get_mf_vec3f" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_get_mf_color webotslib
	"wb_supervisor_field_get_mf_color" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_get_mf_rotation webotslib
	"wb_supervisor_field_get_mf_rotation" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_get_mf_string webotslib
	"wb_supervisor_field_get_mf_string" () (:string))
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_get_mf_node webotslib
	"wb_supervisor_field_get_mf_node" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_set_sf_bool webotslib
	"wb_supervisor_field_set_sf_bool" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_set_sf_int32 webotslib
	"wb_supervisor_field_set_sf_int32" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_set_sf_float webotslib
	"wb_supervisor_field_set_sf_float" () :integer)
	;;  ( :integer :float)

(defforeign wb_supervisor_field_set_sf_vec2f webotslib
	"wb_supervisor_field_set_sf_vec2f" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_set_sf_vec3f webotslib
	"wb_supervisor_field_set_sf_vec3f" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_set_sf_rotation webotslib
	"wb_supervisor_field_set_sf_rotation" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_set_sf_color webotslib
	"wb_supervisor_field_set_sf_color" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_set_sf_string webotslib
	"wb_supervisor_field_set_sf_string" () :integer)
	;;  ( :integer :string)

(defforeign wb_supervisor_field_set_mf_bool webotslib
	"wb_supervisor_field_set_mf_bool" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_set_mf_int32 webotslib
	"wb_supervisor_field_set_mf_int32" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_set_mf_float webotslib
	"wb_supervisor_field_set_mf_float" () :integer)
	;;  ( :integer :integer :float)

(defforeign wb_supervisor_field_set_mf_vec2f webotslib
	"wb_supervisor_field_set_mf_vec2f" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_set_mf_vec3f webotslib
	"wb_supervisor_field_set_mf_vec3f" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_set_mf_rotation webotslib
	"wb_supervisor_field_set_mf_rotation" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_set_mf_color webotslib
	"wb_supervisor_field_set_mf_color" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_set_mf_string webotslib
	"wb_supervisor_field_set_mf_string" () :integer)
	;;  ( :integer :integer :string)

(defforeign wb_supervisor_field_insert_mf_bool webotslib
	"wb_supervisor_field_insert_mf_bool" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_insert_mf_int32 webotslib
	"wb_supervisor_field_insert_mf_int32" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_insert_mf_float webotslib
	"wb_supervisor_field_insert_mf_float" () :integer)
	;;  ( :integer :integer :float)

(defforeign wb_supervisor_field_insert_mf_vec2f webotslib
	"wb_supervisor_field_insert_mf_vec2f" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_insert_mf_vec3f webotslib
	"wb_supervisor_field_insert_mf_vec3f" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_insert_mf_rotation webotslib
	"wb_supervisor_field_insert_mf_rotation" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_insert_mf_color webotslib
	"wb_supervisor_field_insert_mf_color" () :integer)
	;;  ( :integer :integer :integer)

(defforeign wb_supervisor_field_insert_mf_string webotslib
	"wb_supervisor_field_insert_mf_string" () :integer)
	;;  ( :integer :integer :string)

(defforeign wb_supervisor_field_remove_mf webotslib
	"wb_supervisor_field_remove_mf" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_field_import_mf_node webotslib
	"wb_supervisor_field_import_mf_node" () :integer)
	;;  ( :integer :integer :string)

(defforeign wb_supervisor_field_import_mf_node_from_string webotslib
	"wb_supervisor_field_import_mf_node_from_string" () :integer)
	;;  ( :integer :integer :string)

(defforeign wb_supervisor_field_remove_sf webotslib
	"wb_supervisor_field_remove_sf" () :integer)
	;;  ( :integer)

(defforeign wb_supervisor_field_import_sf_node webotslib
	"wb_supervisor_field_import_sf_node" () :integer)
	;;  ( :integer :string)

(defforeign wb_supervisor_field_import_sf_node_from_string webotslib
	"wb_supervisor_field_import_sf_node_from_string" () :integer)
	;;  ( :integer :string)

(defforeign wb_supervisor_virtual_reality_headset_is_used webotslib
	"wb_supervisor_virtual_reality_headset_is_used" () :integer)
	;;  ()

(defforeign wb_supervisor_virtual_reality_headset_get_position webotslib
	"wb_supervisor_virtual_reality_headset_get_position" () :integer)
	;;  ()

(defforeign wb_supervisor_virtual_reality_headset_get_orientation webotslib
	"wb_supervisor_virtual_reality_headset_get_orientation" () :integer)
	;;  ()

(defforeign wb_supervisor_simulation_revert webotslib
	"wb_supervisor_simulation_revert" () :integer)
	;;  ()

(defforeign wb_supervisor_load_world webotslib
	"wb_supervisor_load_world" () :integer)
	;;  ( :string)

(defforeign wb_supervisor_save_world webotslib
	"wb_supervisor_save_world" () :integer)
	;;  ( :string)

(defforeign wb_supervisor_field_remove_mf_node webotslib
	"wb_supervisor_field_remove_mf_node" () :integer)
	;;  ( :integer :integer)

(defforeign wb_supervisor_simulation_physics_reset webotslib
	"wb_supervisor_simulation_physics_reset" () :integer)
	;;  ()
(defconstant WB_SUPERVISOR_MOVIE_READY 0)
(defconstant WB_SUPERVISOR_MOVIE_RECORDING 1)
(defconstant WB_SUPERVISOR_MOVIE_SAVING 2)
(defconstant WB_SUPERVISOR_MOVIE_WRITE_ERROR 3)
(defconstant WB_SUPERVISOR_MOVIE_ENCODING_ERROR 4)
(defconstant WB_SUPERVISOR_MOVIE_SIMULATION_ERROR 5)

(defforeign wb_supervisor_movie_get_status webotslib
	"wb_supervisor_movie_get_status" () :integer)
	;;  ()

(defforeign wb_supervisor_start_movie webotslib
	"wb_supervisor_start_movie" () :integer)
	;;  ( :string :integer :integer :integer :integer :integer :integer)

(defforeign wb_supervisor_stop_movie webotslib
	"wb_supervisor_stop_movie" () :integer)
	;;  ()

(defforeign wb_supervisor_get_movie_status webotslib
	"wb_supervisor_get_movie_status" () :integer)
	;;  ()

(defforeign wb_touch_sensor_enable webotslib
	"wb_touch_sensor_enable" () :integer)
	;;  ( :integer :integer)

(defforeign wb_touch_sensor_disable webotslib
	"wb_touch_sensor_disable" () :integer)
	;;  ( :integer)

(defforeign wb_touch_sensor_get_sampling_period webotslib
	"wb_touch_sensor_get_sampling_period" () :integer)
	;;  ( :integer)

(defforeign wb_touch_sensor_get_lookup_table_size webotslib
	"wb_touch_sensor_get_lookup_table_size" () :integer)
	;;  ( :integer)

(defforeign wb_touch_sensor_get_lookup_table webotslib
	"wb_touch_sensor_get_lookup_table" () :integer)
	;;  ( :integer)

(defforeign wb_touch_sensor_get_value webotslib
	"wb_touch_sensor_get_value" () :float)
	;;  ( :integer)

(defforeign wb_touch_sensor_get_values webotslib
	"wb_touch_sensor_get_values" () :integer)
	;;  ( :integer)

(defcenum WbTouchSensorType
	(:WB_TOUCH_SENSOR_BUMPER 0)
	:WB_TOUCH_SENSOR_FORCE
	:WB_TOUCH_SENSOR_FORCE3D)

(defforeign wb_touch_sensor_get_type webotslib
	"wb_touch_sensor_get_type" () WbTouchSensorType)
	;;  ( :integer)

(defforeign wbu_motion_new webotslib
	"wbu_motion_new" () :integer)
	;;  ( :string)

(defforeign wbu_motion_delete webotslib
	"wbu_motion_delete" () :integer)
	;;  ( :integer)

(defforeign wbu_motion_play webotslib
	"wbu_motion_play" () :integer)
	;;  ( :integer)

(defforeign wbu_motion_stop webotslib
	"wbu_motion_stop" () :integer)
	;;  ( :integer)

(defforeign wbu_motion_set_loop webotslib
	"wbu_motion_set_loop" () :integer)
	;;  ( :integer :integer)

(defforeign wbu_motion_set_reverse webotslib
	"wbu_motion_set_reverse" () :integer)
	;;  ( :integer :integer)

(defforeign wbu_motion_is_over webotslib
	"wbu_motion_is_over" () :integer)
	;;  ( :integer)

(defforeign wbu_motion_get_duration webotslib
	"wbu_motion_get_duration" () :integer)
	;;  ( :integer)

(defforeign wbu_motion_get_time webotslib
	"wbu_motion_get_time" () :integer)
	;;  ( :integer)

(defforeign wbu_motion_set_time webotslib
	"wbu_motion_set_time" () :integer)
	;;  ( :integer :integer)

(defforeign wbu_system_getenv webotslib
	"wbu_system_getenv" () (:string))
	;;  ( :string)

(defforeign wbu_system_short_path webotslib
	"wbu_system_short_path" () (:string))
	;;  ( :string)

(defforeign wbu_system_webots_tmp_path webotslib
	"wbu_system_webots_tmp_path" () (:string))
	;;  ( :integer)


(defun cout-float-vector (adr len &optional (r (instantiate float-vector len)))
  (dotimes (i len) (setf (elt r i)
                         #+:x86_64
                         (sys:peek (+ adr (* 8 i)) :double)
                         #-:x86_64
                         (sys:peek (+ adr (* 4 i)) :double)
                         ))
  r)
;;
;;(defun nao-gyro nil (cout-float-vector (wb_gyro_get_values gyro) 2))
(defun fstring-to-string (fstr)
  (let* ((len (length fstr)) (str (make-string len)))
    (dotimes (i len) (setf (elt str i) (elt fstr i)))
    str))
;;;
(defun cout-string (fstr size)
  (sys:poke
   (+ 2 (* 4 size)) ;; length + 2;; bgra8
   (+ (sys::address fstr) 8) ;; address
   :long)
  fstr)

(defun wb_camera_image_get_alfa (im camera_width m n)
 (elt im (+ 3 (* 4 (+ (* n camera_width) m)))))
(defun wb_camera_image_get_byte (im camera_width m n &optional (offset 0))
 (if (= offset 3)
   (wb_camera_image_get_grey im camera_width m n)
     (elt im (+ offset (* 4 (+ (* n camera_width) m))))))
(defun wb_camera_image_get_red (im camera_width m n)
 (wb_camera_image_get_byte im camera_width m n 2))
(defun wb_camera_image_get_green (im camera_width m n)
 (wb_camera_image_get_byte im camera_width m n 1))
(defun wb_camera_image_get_blue (im camera_width m n)
 (wb_camera_image_get_byte im camera_width m n 0))

(defun wb_camera_image_get_grey (im camera_width m n)
 (/ (+
     (wb_camera_image_get_red im camera_width m n)
     (wb_camera_image_get_green im camera_width m n)
     (wb_camera_image_get_blue im camera_width m n))
  3))

(defun wb_camera_image_get_yellow (im camera_width m n)
 (/ (+
     (wb_camera_image_get_red im camera_width m n)
     (wb_camera_image_get_green im camera_width m n))
  2))

(defun webots-camera-fstring (camera)
  (let* ((w (wb_camera_get_width camera))
         (h (wb_camera_get_height camera)))
    (cout-string (wb_camera_get_image camera) (* 4 w h))))

(defun webots-camera-image (camera
                            &optional str)
  (let* ((w (wb_camera_get_width camera))
         (h (wb_camera_get_height camera))
         (fs (cout-string (wb_camera_get_image camera) (* 4 w h))))
    (unless str (setq str (make-string (* 3 w h))))
    (do* ((y 0 (+ 1 y)) (wy (* y w) (* y w)))
         ((>= y h))
         (do* ((x 0 (+ 1 x))
               (p3 (* 3 (+ x wy)) (* 3 (+ x wy)))
               (p4 (* 4 (+ x wy)) (* 4 (+ x wy))))
              ((>= x w))
              (setf (elt str p3) (elt fs (+ 2 p4))
                    (elt str (+ 1 p3)) (elt fs (+ 1 p4))
                    (elt str (+ 2 p3)) (elt fs p4))))
    #|
    (do ((i 0 (+ 1 i)) (p3 0 (+ 3 p3)) (p4 0 (+ 4 p4)))
    ((>= i wh))
    (setf (elt str p3) (elt fs (+ 2 p4))
    (elt str (+ 1 p3)) (elt fs (+ 1 p4))
    (elt str (+ 2 p3)) (elt fs p4)))
    (do* ((y 0 (+ 1 y)) (wy (* y w) (* y w)))
	 ((>= y h))
	 (do* ((x 0 (+ 1 x))
	       (p3 (* 3 (+ x wy)) (* 3 (+ x wy)))
	       (p4 (* 4 (+ x wy)) (* 4 (+ x wy))))
	      ((>= x w))
	      (setf (elt fs p3) (elt fs (+ 2 p4))
		    (elt fs (+ 1 p3)) (elt fs (+ 1 p4))
		    (elt fs (+ 2 p3)) (elt fs p4))))
    (do ((i 0 (+ 1 i)) (p3 0 (+ 3 p3)) (p4 0 (+ 4 p4)))
	((>= i wh))
	(setf (elt str p3) (elt fs (+ 2 p4))
	      (elt str (+ 1 p3)) (elt fs (+ 1 p4))
	      (elt str (+ 2 p3)) (elt fs p4)))
    (do* ((y 0 (+ 1 y)) (wy (* y w) (* y w)))
	 ((>= y h))
	 (do* ((x 0 (+ 1 x))
	       (p3 (* 3 (+ x wy)) (* 3 (+ x wy)))
	       (p4 (* 4 (+ x wy)) (* 4 (+ x wy))))
	      ((>= x w))
	      (setf (elt str p3) (elt fs (+ 2 p4))
		    (elt str (+ 1 p3)) (elt fs (+ 1 p4))
		    (elt str (+ 2 p3)) (elt fs p4))))
    (do* ((y 0 (+ 1 y)) (wy (* y w) (* y w)))
	 ((>= y h))
	 (do* ((x 0 (+ 1 x))
	       (p3 (* 3 (+ x wy)) (* 3 (+ x wy)))
	       (p4 (* 4 (+ x wy)) (* 4 (+ x wy))))
	      ((>= x w))
	      (setf (elt str p3) (elt fs (+ 2 p4)))
	      (setf (elt str (+ 1 p3)) (elt fs (+ 1 p4)))
	      (setf (elt str (+ 2 p3)) (elt fs p4))))
    (do* ((y 0 (+ 1 y)) (wy (* y w) (* y w)))
	 ((>= y h))
	 (do* ((x 0 (+ 1 x)) (wxy (+ x wy) (+ x wy)))
	      ((>= x w))
	      (setf (elt str (* 3 wxy))
		    (elt fs (+ 2 (* 4 wxy))))
	      (setf (elt str (+ 1 (* 3 wxy)))
		    (elt fs (+ 1 (* 4 wxy))))
	      (setf (elt str (+ 2 (* 3 wxy)))
		    (elt fs (+ 0 (* 4 wxy))))))
    (dotimes (i wh)
      (setf (elt str ptr30) (elt fs ptr42)
    (elt str ptr31) (elt fs ptr41)
    (elt str ptr32) (elt fs ptr40))
      (incf ptr30 3) (incf ptr31 3) (incf ptr32 3)
      (incf ptr40 4) (incf ptr41 4) (incf ptr42 4))
    |#
    str)
  )

(defun print_camera_image (camera &optional (offset 0) (SCALED 4)
                                  &aux width height image grey)
  (setq width (wb_camera_get_width camera))
  (setq height (wb_camera_get_height camera))
  (setq image (webots-camera-fstring camera))
  (format t "image length=~s~%" (length image))
  (format t "image length=~d~%" (length image))
  (format t "original resolution: ~d x ~d, scaled to ~d x ~d~%"
          width height (/ width SCALED) (/ height SCALED))

  (setq line (make-array (/ width SCALED)))
  (do ((y 0 (+ y SCALED)))
      ((>= y height))
      (format t "~d line:" y)
      (do ((x 0 (+ x SCALED)) (count 0 (1+ count)))
          ((>= x width) )
          (setq grey (wb_camera_image_get_byte image width x y offset))
          (format t " ~x" grey)
          (setf (elt line count) grey))
      (format t "~%")
      )
  (format t "end of y-do ~%")
  )
;;;
;;;
(defvar
  *node-type-symbol-list*
  (mapcan
   #'(lambda (n)
       (if (boundp n)
           (list (cons (symbol-value n) n))
         nil))
   '(
     WB_NODE_NO_NODE
     WB_NODE_APPEARANCE
     WB_NODE_BACKGROUND
     WB_NODE_BOX
     WB_NODE_COLOR
     WB_NODE_CONE
     WB_NODE_COORDINATE
     WB_NODE_CYLINDER
     WB_NODE_DIRECTIONAL_LIGHT
     WB_NODE_ELEVATION_GRID
     WB_NODE_EXTRUSION
     WB_NODE_FOG
     WB_NODE_GROUP
     WB_NODE_IMAGE_TEXTURE
     WB_NODE_INDEXED_FACE_SET
     WB_NODE_INDEXED_LINE_SET
     WB_NODE_MATERIAL
     WB_NODE_POINT_LIGHT
     WB_NODE_SHAPE
     WB_NODE_SPHERE
     WB_NODE_SPOT_LIGHT
     WB_NODE_SWITCH
     WB_NODE_TEXTURE_COORDINATE
     WB_NODE_TEXTURE_TRANSFORM
     WB_NODE_TRANSFORM
     WB_NODE_VIEWPOINT
     WB_NODE_WORLD_INFO
     WB_NODE_CAPSULE
     WB_NODE_PLANE
     WB_NODE_ROBOT
     WB_NODE_SUPERVISOR
     WB_NODE_DIFFERENTIAL_WHEELS
     WB_NODE_BALL_JOINT
     WB_NODE_BALL_JOINT_PARAMETERS
     WB_NODE_CAMERA_ZOOM
     WB_NODE_CHARGER
     WB_NODE_CONTACT_PROPERTIES
     WB_NODE_DAMPING
     WB_NODE_HINGE_JOINT
     WB_NODE_HINGE_JOINT_PARAMETERS
     WB_NODE_HINGE_2_JOINT_PARAMETERS
     WB_NODE_HINGE_2_JOINT
     WB_NODE_JOINT_PARAMETERS
     WB_NODE_PHYSICS
     WB_NODE_SLIDER_JOINT
     WB_NODE_SOLID
     WB_NODE_SOLID_REFERENCE
     WB_NODE_ACCELEROMETER
     WB_NODE_CAMERA
     WB_NODE_COMPASS
     WB_NODE_CONNECTOR
     WB_NODE_DISPLAY
     WB_NODE_DISTANCE_SENSOR
     WB_NODE_EMITTER
     WB_NODE_GPS
     WB_NODE_GYRO
     WB_NODE_INERTIAL_UNIT
     WB_NODE_LED
     WB_NODE_LIGHT_SENSOR
     WB_NODE_LINEAR_MOTOR
     WB_NODE_MICROPHONE
     WB_NODE_PEN
     WB_NODE_POSITION_SENSOR
     WB_NODE_PROPELLER
     WB_NODE_RADIO
     WB_NODE_ROTATIONAL_MOTOR
     WB_NODE_RECEIVER
     WB_NODE_SERVO
     WB_NODE_SPEAKER
     WB_NODE_TOUCH_SENSOR
     ))
  )

(defun webots-node-type-symbol (num)
  (cdr (assoc num *node-type-symbol-list*)))

(defun webots-device-names nil
  (mapcar #'(lambda (s) (get s :device-name)) (webots-device-symbols)))

(defun init-webots-device-symbols nil
  (let* ((n_devices (wb_robot_get_number_of_devices))
         (robot-type (wb_robot_get_type))
         dev2 name dev-sym
         (dev 0) type-sym type dev-symbols type-symbols
         (robot-name (string-upcase (wb_robot_get_name)))
         (robot (intern robot-name)))
    (when (= WB_NODE_DIFFERENTIAL_WHEELS robot-type)
      (setq type-sym (webots-node-type-symbol robot-type))
      (setf (get type-sym :value) (symbol-value type-sym))
      (format t "--- Differetial wheels name=~A, type-sym=~A~%" robot type-sym)
      (dolist (n '("-BOTH" "-LEFT" "-RIGHT"))
        (setq name (concatenate string robot-name n))
        (setq dev-sym (intern name))
        (setf (get dev-sym :device) dev)
        (setf (get type-sym :device-names)
              (push name (get type-sym :device-names)))
        (setf (get type-sym :device-symbols)
              (push dev-sym
                    (get type-sym :device-symbols)))
        (incf dev)
        )
      (setf (get type-sym :device-names)
            (reverse (get type-sym :device-names)))
      (setf (get type-sym :device-symbols) 
            (reverse (get type-sym :device-symbols)))
      )
    (dotimes (i n_devices)
      (setq dev (wb_robot_get_device_by_index i))
      ;;(setq name (format nil "~A" (wb_device_get_name dev)))
      (setq name (fstring-to-string (wb_device_get_name dev)))
      (setq dev2 (wb_robot_get_device name))
      (setq type (wb_device_get_type dev))
      (setq type-sym (webots-node-type-symbol type))
      (setq dev-sym (intern (string-upcase name)))
      (setf (get dev-sym :device-name) name)
      (setf (get dev-sym :device) dev)
      (setf (get dev-sym :device-type) type)
      (setf (get dev-sym :device-type-symbol) type-sym)
      (format t "dev-sym=~A(~A) type=~A(~A) dev=~A(~A in ~A)~%"
              dev-sym name type type-sym dev i n_devices)
      (setf (get type-sym :device-names)
            (cons name (get type-sym :device-names)))
      (setf (get type-sym :device-symbols)
            (cons dev-sym (get type-sym :device-symbols)))
      (setf (get type-sym :value) (symbol-value type-sym))
      (push dev-sym dev-symbols)
      (pushnew type-sym type-symbols)
      )
    (dolist (typ type-symbols)
      (setf (get typ :device-names) (reverse (get typ :device-names)))
      (setf (get typ :device-symbols) (reverse (get typ :device-symbols)))
      (setf (get robot typ) (get typ :device-symbols)))
    (setf (get robot :device-types) type-symbols)
    (setf (get robot :device-symbols) (reverse dev-symbols))
    
    (setq *webots-camera-symbols*
          (get 'wb_node_camera :device-symbols))
    (setq *webots-all-motor-symbols*
          (append
           (get 'WB_NODE_DIFFERENTIAL_WHEELS :device-symbols)
           (get 'WB_NODE_ROTATIONAL_MOTOR :device-symbols)
           (get 'WB_NODE_LINEAR_MOTOR :device-symbols)
           (get 'WB_NODE_SERVO :device-symbols)))
    ))

(defun webots-camera-symbols nil *webots-camera-symbols*)
(defun webots-all-motor-symbols nil *webots-all-motor-symbols*)

(defun webots-device-enables (time_step)
  (when (get 'WB_NODE_DIFFERENTIAL_WHEELS :device-symbols)
    (wb_differential_wheels_enable_encoders)
    )
  (dolist (s (get 'WB_NODE_ROTATIONAL_MOTOR :device-symbols))
    (wb_motor_enable_position (get s :device) time_step)
    (wb_motor_set_position (get s :device) 0.0)
    )
  (dolist (s (get 'WB_NODE_LINEAR_MOTOR :device-symbols))
    (wb_motor_enable_position (get s :device) time_step)
    ;;(wb_motor_set_position (get s :device) 0.0))
    )
  (dolist (s (get 'WB_NODE_SERVO :device-symbols))
    (wb_servo_enable_position (get s :device) time_step))
  ;;
  (dolist (s (get 'WB_NODE_CAMERA :device-symbols))
    (wb_camera_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_ACCELEROMETER :device-symbols))
    (wb_accelerometer_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_GYRO :device-symbols))
    (wb_gyro_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_GPS :device-symbols))
    (wb_gps_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_TOUCH_SENSOR :device-symbols))
    (wb_touch_sensor_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_DISTANCE_SENSOR :device-symbols))
    (wb_distance_sensor_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_COMPASS :device-symbols))
    (wb_compass_enable (get s :device) time_step))
  (dolist (s (get 'WB_NODE_INERTIAL_UNIT :device-symbols))
    (wb_inertial_unit_enable (get s :device) time_step))
  )
;;;
(defun wb_differential_wheels_set_wheel_speed (d v)
  (cond
   ((= d 0)
    (wb_differential_wheels_set_speed  v v))
   ((= d 1)
    (wb_differential_wheels_set_speed
     v (wb_differential_wheels_get_right_speed)))
   ((= d 2)
    (wb_differential_wheels_set_speed
     (wb_differential_wheels_get_left_speed) v))))

(defun wb_differential_wheels_get_wheel_speed (d)
  (cond
   ((= d 0)
    (/ (+ (wb_differential_wheels_get_left_speed)
          (wb_differential_wheels_get_right_speed)) 2.0)
    )
   ((= d 1) (wb_differential_wheels_get_left_speed))
   ((= d 2) (wb_differential_wheels_get_right_speed))))

(defun init-webots-define-motor-functions nil
  (mapcar
   #'(lambda (s)
       (let* ((d (get s :device))
              (max (wb_differential_wheels_get_max_speed))
              (min (- max))
              form)
         (setf (get s :min) min)
         (setf (get s :max) max)
         (setf (get s :dtheta) (wb_differential_wheels_get_speed_unit))
         (setq form
               `(defun ,s (&optional v)
                  (if v (wb_differential_wheels_set_wheel_speed ,d v)
                    (wb_differential_wheels_get_wheel_speed ,d))
                  ))
         (eval form)
         (setf (get s :def) form)
         s))
   (get 'wb_node_differential_wheels :device-symbols))
  (mapcar
   #'(lambda (s)
       (let* ((d (get s :device))
              (min (wb_motor_get_min_position d))
              (max (wb_motor_get_max_position d))
              (zero-range (zerop (- max min)))
              form)
         (setf (get s :min) (if zero-range -135.0 (rad2deg min)))
         (setf (get s :max) (if zero-range 135.0 (rad2deg max) ))
         (setf (get s :dtheta) (* (- (get s :max) (get s :min)) 0.1))
         (setq form
               `(defun ,s (&optional v)
                  (if v (wb_motor_set_position ,d (deg2rad v)))
                  (rad2deg (wb_motor_get_position ,d))
                  ))
         (setf (get s :def) form)
         (eval form)
         s))
   (get 'wb_node_rotational_motor :device-symbols))
  (mapcar
   #'(lambda (s)
       (let* ((d (get s :device))
              (min (wb_motor_get_min_position d))
              (max (wb_motor_get_max_position d))
              (zero-range (zerop (- max min)))
              form)
         (setf (get s :min) (if zero-range 0.0 min))
         (setf (get s :max) (if zero-range 1.0 max) )
         (setf (get s :dtheta) (* (- (get s :max) (get s :min)) 0.1))
         (setq form
               `(defun ,s (&optional v)
                  (if v (wb_motor_set_position ,d v))
                  (wb_motor_get_position ,d)
                  ))
         (setf (get s :def) form)
         (eval form)
         s))
   (get 'wb_node_linear_motor :device-symbols))
  (mapcar
   #'(lambda (s)
       (let* ((d (get s :device))
              (min (wb_servo_get_min_position d))
              (max (wb_servo_get_max_position d))
              (zero-range (zerop (- max min)))
              form)
         (setf (get s :min) (if zero-range -135.0 (rad2deg min)))
         (setf (get s :max) (if zero-range 135.0 (rad2deg max) ))
         (setf (get s :dtheta) (* (- (get s :max) (get s :min)) 0.1))
         (setq form
               `(defun ,s (&optional v)
                  (if v (wb_servo_set_position ,d (deg2rad v)))
                  (rad2deg (wb_servo_get_position ,d))
                  ))
         (setf (get s :def) form)
         (eval form)
         s))
   (get 'wb_node_servo :device-symbols))
  )

(defun update-to-webots (&optional (av (send *robot* :angle-vector)))
  (let ((servo-names
         (append (get 'wb_node_servo :device-symbols)
                 (get 'wb_node_rotational_motor :device-symbols))))
    (dotimes (i (length servo-names))
      (funcall (elt servo-names i) (elt av i))))
  )
(defun update-to-eus-robot (&optional (av (send *robot* :angle-vector)))
  (let ((servo-names
         (append (get 'wb_node_servo :device-symbols)
                 (get 'wb_node_rotational_motor :device-symbols))))
    (send *robot* :angle-vector
          (coerce servo-names float-vector)))
  )

;;;
(defun robot-accelerometer (&optional (cnt 1)
                                      (acc (instantiate float-vector 3)))
  (dotimes (i cnt)
    (v+ acc
        (cout-float-vector
         (wb_accelerometer_get_values (get 'accelerometer :device)) 3)
        acc)
    )
  (scale (/ 1.0 cnt) acc))
(defun robot-gyro nil (cout-float-vector (wb_gyro_get_values (get 'gyro :device)) 2))

(defun terminate nil
  (wb_robot_cleanup))

(defun simulation_step nil
  (if (= (wb_robot_step time_step) -1)
      (terminate)))

;;;

(defun webot-jvl-images (&optional (x 0) (y 30) 
                                   &aux (width 160) (height 120)
                                   remove-list)
  (when
      (get 'wb_node_camera :device-symbols)
    (dolist (s (get 'wb_node_camera :device-symbols))
      (setq width (wb_camera_get_width (get s :device)))
      (setq height (wb_camera_get_height (get s :device)))
      (format t "jvl-images s=~S w=~A,h=~A~%" s width height)
      (cond
       ((= height 1) ;; remove sick lms, it should not be camera!>cyberbotics
        (push s remove-list))
       (t (setf (get s :jvl-image)
                (instance jvl-image :init :width width :height height))
          (send (get s :jvl-image) :color-image24)
          (setf (get s :image-canvas)
                (create-image-canvas (get s :jvl-image) :title (get s :device-name)))
          (send (get s :image-canvas) :move x y)
          (setf (get s :image-width) width)
          (setf (get s :image-height) height)
          (setf (get s :x) x (get s :y) y)
          (setq y (+ y height 30)))))
    (setf (get 'wb_node_camera :device-symbols)
          (set-difference (get 'wb_node_camera :device-symbols)
                          remove-list)))
  (format t "jvl-images =~A~%" (get 'wb_node_camera :device-symbols))
  )

(defun webot-edge-images ()
  (dolist (s (get 'wb_node_camera :device-symbols))
    (setf (get s :edge-converter)
          (instance edge-converter :init :image (get s :jvl-image)))
    ;;(send *edge* :set-param ":function convSobel")
    ;;(send *edge* :set-param ":function convSmooth")
    ;;(send *edge* :set-param ":function convXY")
    ;;(send *edge* :set-param ":function convMagXY")
    (send (get s :edge-converter) :set-param ":function convCanny")
    (send (get s :edge-converter) :set-param ":gauss-kernel-sigma 1.0")
    (send (get s :edge-converter) :set-param ":gaussderiv-kernel-sigma 1.0")
    (setf (get s :edge-canvas)
          (create-image-canvas (send (get s :edge-converter) :get-outimage)
                               :title (format nil "~A Edge" (get s :device-name))))

    (send (get s :edge-canvas) :move
          (+ (get s :x) (get s :image-width) 5)
          (get s :y))
    )
  )

(defun webot-hsicolor-images (&optional (x 0) (y 330))
  (dolist (s (get 'wb_node_camera :device-symbols))
    (setf (get s :hsicolor-converter)
          (instance hsicolor-converter :init :image (get s :jvl-image)))
    (setf (get s :hsicolor-canvas)
          (create-image-canvas (send (get s :hsicolor-converter) :get-outimage)
                               :title (format nil "~A Color" (get s :device-name))))
    (send (get s :hsicolor-canvas) :move
          (+ (get s :x) (get s :image-width) (get s :image-width) 10)
          (get s :y))

    (setf (get s :hsicolor-panel)
          (instance X::color-converter-panel :create
                    (get s :hsicolor-converter)
                    :filename "ball-color-params.l"
                    :title (format nil "~A Color Panel" (get s :device-name))))
    (send (get s :hsicolor-panel) :move x y)
    (send (get s :hsicolor-panel) :refresh)
    (setq y (+ y 200))
    )
  )

(defun webot-mepzoom-images (&optional (x 420) (y 330))
  (dolist (s (get 'wb_node_camera :device-symbols))
    (setf (get s :mepzoom-converter)
          (instance mepzoom-converter :init :image (get s :jvl-image)
                    :image-type IMAGE_RGB
                    :ref-width 32 :ref-height 32
                    :ser-width 120 :ser-height 100 :step 1))
    (send (get s :mepzoom-converter) :ser-x 80)
    (send (get s :mepzoom-converter) :ser-y 60)
    (setf (get s :mepzoom-refview)
               (create-image-canvas (send (get s :mepzoom-converter) :get-refimage)
                                    :title (format nil "~A Mep" (get s :device-name))))
    (send (get s :mepzoom-refview) :move x y)
    (setq y (+ y 200))
    )
  )

(defun webot-init-images nil
  (webot-jvl-images 0 30)
  (webot-edge-images)
  (webot-hsicolor-images)
  (webot-mepzoom-images)
  )

(defun webot-image-capture nil
  (dolist (s (get 'wb_node_camera :device-symbols))
    (unless (get s :capture-off)
      (send (get s :jvl-image) :set-buffer
            (webots-camera-image
             (get s :device)
             (make-foreign-string (send (get s :jvl-image) :get-buffer)
                                  (* 3 (get s :image-width) (get s :image-height)))))
      (send (get s :image-canvas) :putimage (get s :jvl-image) :flush t)))
  )
;;;
;;;
;;;
(defun webot-proc-edge nil
  (dolist (s (get 'wb_node_camera :device-symbols))
    (unless (get s :edge-off)
      (send (get s :edge-converter) :convert)
      (send (get s :edge-canvas) :putimage 
            (send (get s :edge-converter) :get-outimage) :flush t)
      )
    ))

(defun webot-proc-color nil
  (dolist (s (get 'wb_node_camera :device-symbols))
    (unless (get s :hsicolor-off)
      (send (get s :hsicolor-converter) :convert)
      (send (get s :hsicolor-converter) :get-result 0)
      (send (get s :hsicolor-canvas)
            :putimage (send (get s :hsicolor-converter) :get-outimage) :flush t)
      (when (> (send (get s :hsicolor-converter) :area) 0)
        (send (get s :hsicolor-canvas)
              :draw-cross (send (get s :hsicolor-converter) :center-xy) 5 x::*red*)
        (send (get s :hsicolor-canvas)
              :draw-cross (send (get s :hsicolor-converter) :xy1) 5 x::*yellow*)
        (send (get s :hsicolor-canvas)
              :draw-cross (send (get s :hsicolor-converter) :xy2) 5 x::*white*)
        (send (get s :hsicolor-canvas) :flush))
      )
    )
  )
(defun webot-proc-mepzoom nil
  (dolist (s (get 'wb_node_camera :device-symbols))
    (unless (get s :mepzoom-off)
      (proc-mepzoom-one
       (get s :mepzoom-converter)
       (get s :image-canvas)
       (get s :mepzoom-refview)
       'track))
    )
  )

(defun proc-mepzoom-one (mep view refview mep-state)
  (send mep :convert)
  (send view :putimage (send mep :get-inimage) :flush t)
  (send refview :putimage (send mep :get-refimage) :flush t)
  ;;
  (send mep :draw-ser-rectangle view)
  (send mep :draw-mv-rectangle view)
  (send mep :draw-ref-rectangle refview) 

  (send view :string 0 50 (format nil "~5,3f" (send mep :distmin)))
  (send view :string 0 75 (format nil "~5,3f [sec]" (send mep :conv-time)))
  (send view :draw-cross (send mep :mv))

  (send view :flush)
  (send refview :flush)
  ;;
  (when (eq mep-state 'track)
    (send mep :ser-x (send mep :mv-x))
    (send mep :ser-y (send mep :mv-y)))
  
  (when (and (eq mep-state 'track) (> (send mep :distmin) 0.15))
    (send mep :ser-x 80)
    (send mep :ser-y 60)
    (send mep :ser-width 100)
    (send mep :ser-height 70)
    (setq mep-state 'search)
    )
  (when (and (eq mep-state 'search) (< (send mep :distmin) 0.15))
    (format t "mep-state=search pos=(~s ~s)~%"
            (send mep :mv-x) (send mep :mv-y))
    (send mep :ser-x (send mep :mv-x))
    (send mep :ser-y (send mep :mv-y))
    (send mep :ser-width 80)
    (send mep :ser-height 70)
    (setq mep-state 'track)
    )
  )

(defun webot-proc-mouse
  (&aux ev et)
  (while (setq ev (x::next-event))
    (dolist (s (get 'wb_node_camera :device-symbols))
      (cond
       ((eq (x::event-window ev) (get s :image-canvas))
        (when (eq (x::event-type ev) :buttonrelease)
          (format t "mouse button=~s in ~A pos=~s~%"
                  (x::event-button ev) s (x::event-pos ev))
          (let* ((mp (x::event-pos ev))
                 (x (elt mp 0)) (y (elt mp 1)))
            (cond
             ((= 3 (x::event-button ev))
              (setq *attention-camera* s)
              (setq *lookat-run* :mep)
              )
             ((>= 2 (x::event-button ev))
              (send (get s :image-canvas) :buttonpress ev)
              (send (get s :mepzoom-converter) :update-zoom-ref x y)
              (send (get s :mepzoom-converter)  :ser-x x)
              (send (get s :mepzoom-converter)  :ser-y y)
              )))))
       ((eq (x::event-window ev) (get s :hsicolor-canvas))
        (when (eq (x::event-type ev) :buttonrelease)
          (format t " mouse button=~s in ~A pos=~s~%"
                  (x::event-button ev) s (x::event-pos ev))
          (setq *attention-camera* s)
          (setq *lookat-run* :color))
        )))
    (setq et (x::event-type ev))
    (if (not (eq et :noexpose))
        (send (x::event-window ev) et ev)))
  )

(defun webot-image-proc-one nil
  (webot-image-capture)
  (webot-proc-mouse)
  (webot-proc-edge)
  (webot-proc-color)
  (webot-proc-mepzoom)
  )



